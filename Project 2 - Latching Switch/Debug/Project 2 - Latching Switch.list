
Project 2 - Latching Switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000264  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f8  080003f8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f8  080003f8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003f8  080003f8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f8  080003f8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f8  080003f8  000103f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003fc  080003fc  000103fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000400  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000404  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000404  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001312  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004af  00000000  00000000  00021346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  000217f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000178  00000000  00000000  000219b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013a9b  00000000  00000000  00021b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001eac  00000000  00000000  000355cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d974  00000000  00000000  00037477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b4deb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000528  00000000  00000000  000b4e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003e0 	.word	0x080003e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080003e0 	.word	0x080003e0

080001d4 <main>:
  */

#include "main.h"

int main(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0

  // Enable port B & C
  RCC->AHB1ENR |= (1 << 2);
 80001da:	4b2f      	ldr	r3, [pc, #188]	; (8000298 <main+0xc4>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001de:	4a2e      	ldr	r2, [pc, #184]	; (8000298 <main+0xc4>)
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	6313      	str	r3, [r2, #48]	; 0x30
  RCC->AHB1ENR |= (1 << 1);
 80001e6:	4b2c      	ldr	r3, [pc, #176]	; (8000298 <main+0xc4>)
 80001e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ea:	4a2b      	ldr	r2, [pc, #172]	; (8000298 <main+0xc4>)
 80001ec:	f043 0302 	orr.w	r3, r3, #2
 80001f0:	6313      	str	r3, [r2, #48]	; 0x30

  // Output setup for port C
  GPIOC->MODER |= (1 << 26);
 80001f2:	4b2a      	ldr	r3, [pc, #168]	; (800029c <main+0xc8>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a29      	ldr	r2, [pc, #164]	; (800029c <main+0xc8>)
 80001f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80001fc:	6013      	str	r3, [r2, #0]
  GPIOC->OTYPER &= ~(1 << 13);
 80001fe:	4b27      	ldr	r3, [pc, #156]	; (800029c <main+0xc8>)
 8000200:	685b      	ldr	r3, [r3, #4]
 8000202:	4a26      	ldr	r2, [pc, #152]	; (800029c <main+0xc8>)
 8000204:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000208:	6053      	str	r3, [r2, #4]
  GPIOC->OSPEEDR |= (1 << 27);
 800020a:	4b24      	ldr	r3, [pc, #144]	; (800029c <main+0xc8>)
 800020c:	689b      	ldr	r3, [r3, #8]
 800020e:	4a23      	ldr	r2, [pc, #140]	; (800029c <main+0xc8>)
 8000210:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000214:	6093      	str	r3, [r2, #8]
  GPIOC->PUPDR &= ~( (1 << 27)|(1 << 26) );
 8000216:	4b21      	ldr	r3, [pc, #132]	; (800029c <main+0xc8>)
 8000218:	68db      	ldr	r3, [r3, #12]
 800021a:	4a20      	ldr	r2, [pc, #128]	; (800029c <main+0xc8>)
 800021c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000220:	60d3      	str	r3, [r2, #12]

  // Port B input setting
  GPIOB->MODER &= ~( (1 << 2)|(1 << 3) );
 8000222:	4b1f      	ldr	r3, [pc, #124]	; (80002a0 <main+0xcc>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a1e      	ldr	r2, [pc, #120]	; (80002a0 <main+0xcc>)
 8000228:	f023 030c 	bic.w	r3, r3, #12
 800022c:	6013      	str	r3, [r2, #0]
  GPIOB->PUPDR &= ~( (1 << 2)|(1 << 3) );
 800022e:	4b1c      	ldr	r3, [pc, #112]	; (80002a0 <main+0xcc>)
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	4a1b      	ldr	r2, [pc, #108]	; (80002a0 <main+0xcc>)
 8000234:	f023 030c 	bic.w	r3, r3, #12
 8000238:	60d3      	str	r3, [r2, #12]

  GPIOC->BSRR |= (1 << 13);
 800023a:	4b18      	ldr	r3, [pc, #96]	; (800029c <main+0xc8>)
 800023c:	699b      	ldr	r3, [r3, #24]
 800023e:	4a17      	ldr	r2, [pc, #92]	; (800029c <main+0xc8>)
 8000240:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000244:	6193      	str	r3, [r2, #24]

  volatile char bp = 0;
 8000246:	2300      	movs	r3, #0
 8000248:	71fb      	strb	r3, [r7, #7]
  volatile char LEDstate = 0;
 800024a:	2300      	movs	r3, #0
 800024c:	71bb      	strb	r3, [r7, #6]

  while (1)
  {

	  if((GPIOB->IDR & (1 << 1)))
 800024e:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <main+0xcc>)
 8000250:	691b      	ldr	r3, [r3, #16]
 8000252:	f003 0302 	and.w	r3, r3, #2
 8000256:	2b00      	cmp	r3, #0
 8000258:	d002      	beq.n	8000260 <main+0x8c>
  	  {
  		  // Button is pressed
  		  bp = 1;
 800025a:	2301      	movs	r3, #1
 800025c:	71fb      	strb	r3, [r7, #7]
 800025e:	e7f6      	b.n	800024e <main+0x7a>

  	  }
  	  else
  	  {
  		  // If the button is pressed in previous iteration toggle LED on or off
  		  if(bp == 1)
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	b2db      	uxtb	r3, r3
 8000264:	2b01      	cmp	r3, #1
 8000266:	d114      	bne.n	8000292 <main+0xbe>
  		  {
  			  if(LEDstate == 0)
 8000268:	79bb      	ldrb	r3, [r7, #6]
 800026a:	b2db      	uxtb	r3, r3
 800026c:	2b00      	cmp	r3, #0
 800026e:	d108      	bne.n	8000282 <main+0xae>
  			  {
  				  // Toggling LED on
  				  LEDstate = 1;
 8000270:	2301      	movs	r3, #1
 8000272:	71bb      	strb	r3, [r7, #6]
  				  GPIOC->BSRR |= (1 << 29);
 8000274:	4b09      	ldr	r3, [pc, #36]	; (800029c <main+0xc8>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	4a08      	ldr	r2, [pc, #32]	; (800029c <main+0xc8>)
 800027a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800027e:	6193      	str	r3, [r2, #24]
 8000280:	e007      	b.n	8000292 <main+0xbe>

  			  }
  			  else
  			  {
  				  // Toggling LED off
  				  LEDstate = 0;
 8000282:	2300      	movs	r3, #0
 8000284:	71bb      	strb	r3, [r7, #6]
  				  GPIOC->BSRR |= (1 << 13);
 8000286:	4b05      	ldr	r3, [pc, #20]	; (800029c <main+0xc8>)
 8000288:	699b      	ldr	r3, [r3, #24]
 800028a:	4a04      	ldr	r2, [pc, #16]	; (800029c <main+0xc8>)
 800028c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000290:	6193      	str	r3, [r2, #24]
  			  }
  		  }

  		  // Reset button press state to check if button is pressed again next time
  		  bp = 0;
 8000292:	2300      	movs	r3, #0
 8000294:	71fb      	strb	r3, [r7, #7]
	  if((GPIOB->IDR & (1 << 1)))
 8000296:	e7da      	b.n	800024e <main+0x7a>
 8000298:	40023800 	.word	0x40023800
 800029c:	40020800 	.word	0x40020800
 80002a0:	40020400 	.word	0x40020400

080002a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <NMI_Handler+0x4>

080002aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002aa:	b480      	push	{r7}
 80002ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002ae:	e7fe      	b.n	80002ae <HardFault_Handler+0x4>

080002b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002b4:	e7fe      	b.n	80002b4 <MemManage_Handler+0x4>

080002b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002b6:	b480      	push	{r7}
 80002b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002ba:	e7fe      	b.n	80002ba <BusFault_Handler+0x4>

080002bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002c0:	e7fe      	b.n	80002c0 <UsageFault_Handler+0x4>

080002c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002c2:	b480      	push	{r7}
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002c6:	bf00      	nop
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr

080002d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002de:	b480      	push	{r7}
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002e2:	bf00      	nop
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr

080002ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002f0:	f000 f83e 	bl	8000370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <SystemInit+0x20>)
 80002fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000302:	4a05      	ldr	r2, [pc, #20]	; (8000318 <SystemInit+0x20>)
 8000304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	e000ed00 	.word	0xe000ed00

0800031c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800031c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000354 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000320:	480d      	ldr	r0, [pc, #52]	; (8000358 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000322:	490e      	ldr	r1, [pc, #56]	; (800035c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000324:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000328:	e002      	b.n	8000330 <LoopCopyDataInit>

0800032a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800032c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032e:	3304      	adds	r3, #4

08000330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000334:	d3f9      	bcc.n	800032a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000336:	4a0b      	ldr	r2, [pc, #44]	; (8000364 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000338:	4c0b      	ldr	r4, [pc, #44]	; (8000368 <LoopFillZerobss+0x26>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800033c:	e001      	b.n	8000342 <LoopFillZerobss>

0800033e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000340:	3204      	adds	r2, #4

08000342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000344:	d3fb      	bcc.n	800033e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000346:	f7ff ffd7 	bl	80002f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800034a:	f000 f825 	bl	8000398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800034e:	f7ff ff41 	bl	80001d4 <main>
  bx  lr    
 8000352:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000354:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800035c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000360:	08000400 	.word	0x08000400
  ldr r2, =_sbss
 8000364:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000368:	20000024 	.word	0x20000024

0800036c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800036c:	e7fe      	b.n	800036c <ADC_IRQHandler>
	...

08000370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <HAL_IncTick+0x20>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	461a      	mov	r2, r3
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <HAL_IncTick+0x24>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4413      	add	r3, r2
 8000380:	4a04      	ldr	r2, [pc, #16]	; (8000394 <HAL_IncTick+0x24>)
 8000382:	6013      	str	r3, [r2, #0]
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	20000000 	.word	0x20000000
 8000394:	20000020 	.word	0x20000020

08000398 <__libc_init_array>:
 8000398:	b570      	push	{r4, r5, r6, lr}
 800039a:	4d0d      	ldr	r5, [pc, #52]	; (80003d0 <__libc_init_array+0x38>)
 800039c:	4c0d      	ldr	r4, [pc, #52]	; (80003d4 <__libc_init_array+0x3c>)
 800039e:	1b64      	subs	r4, r4, r5
 80003a0:	10a4      	asrs	r4, r4, #2
 80003a2:	2600      	movs	r6, #0
 80003a4:	42a6      	cmp	r6, r4
 80003a6:	d109      	bne.n	80003bc <__libc_init_array+0x24>
 80003a8:	4d0b      	ldr	r5, [pc, #44]	; (80003d8 <__libc_init_array+0x40>)
 80003aa:	4c0c      	ldr	r4, [pc, #48]	; (80003dc <__libc_init_array+0x44>)
 80003ac:	f000 f818 	bl	80003e0 <_init>
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	10a4      	asrs	r4, r4, #2
 80003b4:	2600      	movs	r6, #0
 80003b6:	42a6      	cmp	r6, r4
 80003b8:	d105      	bne.n	80003c6 <__libc_init_array+0x2e>
 80003ba:	bd70      	pop	{r4, r5, r6, pc}
 80003bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c0:	4798      	blx	r3
 80003c2:	3601      	adds	r6, #1
 80003c4:	e7ee      	b.n	80003a4 <__libc_init_array+0xc>
 80003c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ca:	4798      	blx	r3
 80003cc:	3601      	adds	r6, #1
 80003ce:	e7f2      	b.n	80003b6 <__libc_init_array+0x1e>
 80003d0:	080003f8 	.word	0x080003f8
 80003d4:	080003f8 	.word	0x080003f8
 80003d8:	080003f8 	.word	0x080003f8
 80003dc:	080003fc 	.word	0x080003fc

080003e0 <_init>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr

080003ec <_fini>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	bf00      	nop
 80003f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f2:	bc08      	pop	{r3}
 80003f4:	469e      	mov	lr, r3
 80003f6:	4770      	bx	lr
