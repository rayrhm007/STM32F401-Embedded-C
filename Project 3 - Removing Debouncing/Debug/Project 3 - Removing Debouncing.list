
Project 3 - Removing Debouncing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000027c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000410  08000410  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000410  08000410  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000410  08000410  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000410  08000410  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000410  08000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000414  08000414  00010414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000418  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800041c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800041c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001335  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004af  00000000  00000000  00021369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00021818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000178  00000000  00000000  000219d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013a9b  00000000  00000000  00021b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001eba  00000000  00000000  000355eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d9c4  00000000  00000000  000374a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b4e69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000528  00000000  00000000  000b4ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003f8 	.word	0x080003f8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080003f8 	.word	0x080003f8

080001d4 <main>:
  */

#include "main.h"

int main(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
	// Enable port B & C
	RCC->AHB1ENR |= (1 << 2);
 80001da:	4b35      	ldr	r3, [pc, #212]	; (80002b0 <main+0xdc>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001de:	4a34      	ldr	r2, [pc, #208]	; (80002b0 <main+0xdc>)
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1 << 1);
 80001e6:	4b32      	ldr	r3, [pc, #200]	; (80002b0 <main+0xdc>)
 80001e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ea:	4a31      	ldr	r2, [pc, #196]	; (80002b0 <main+0xdc>)
 80001ec:	f043 0302 	orr.w	r3, r3, #2
 80001f0:	6313      	str	r3, [r2, #48]	; 0x30

	// Output setup for port C
	GPIOC->MODER |= (1 << 26);
 80001f2:	4b30      	ldr	r3, [pc, #192]	; (80002b4 <main+0xe0>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a2f      	ldr	r2, [pc, #188]	; (80002b4 <main+0xe0>)
 80001f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80001fc:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~(1 << 13);
 80001fe:	4b2d      	ldr	r3, [pc, #180]	; (80002b4 <main+0xe0>)
 8000200:	685b      	ldr	r3, [r3, #4]
 8000202:	4a2c      	ldr	r2, [pc, #176]	; (80002b4 <main+0xe0>)
 8000204:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000208:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= (1 << 27);
 800020a:	4b2a      	ldr	r3, [pc, #168]	; (80002b4 <main+0xe0>)
 800020c:	689b      	ldr	r3, [r3, #8]
 800020e:	4a29      	ldr	r2, [pc, #164]	; (80002b4 <main+0xe0>)
 8000210:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000214:	6093      	str	r3, [r2, #8]
    GPIOC->PUPDR &= ~( (1 << 27)|(1 << 26) );
 8000216:	4b27      	ldr	r3, [pc, #156]	; (80002b4 <main+0xe0>)
 8000218:	68db      	ldr	r3, [r3, #12]
 800021a:	4a26      	ldr	r2, [pc, #152]	; (80002b4 <main+0xe0>)
 800021c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000220:	60d3      	str	r3, [r2, #12]

    // Port B input setting
    GPIOB->MODER &= ~( (1 << 2)|(1 << 3) );
 8000222:	4b25      	ldr	r3, [pc, #148]	; (80002b8 <main+0xe4>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a24      	ldr	r2, [pc, #144]	; (80002b8 <main+0xe4>)
 8000228:	f023 030c 	bic.w	r3, r3, #12
 800022c:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~( (1 << 2)|(1 << 3) );
 800022e:	4b22      	ldr	r3, [pc, #136]	; (80002b8 <main+0xe4>)
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	4a21      	ldr	r2, [pc, #132]	; (80002b8 <main+0xe4>)
 8000234:	f023 030c 	bic.w	r3, r3, #12
 8000238:	60d3      	str	r3, [r2, #12]

    GPIOC->ODR &= ~(1 << 13);
 800023a:	4b1e      	ldr	r3, [pc, #120]	; (80002b4 <main+0xe0>)
 800023c:	695b      	ldr	r3, [r3, #20]
 800023e:	4a1d      	ldr	r2, [pc, #116]	; (80002b4 <main+0xe0>)
 8000240:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000244:	6153      	str	r3, [r2, #20]

    volatile char bp = 0;
 8000246:	2300      	movs	r3, #0
 8000248:	73fb      	strb	r3, [r7, #15]

    // Increment this when button is pressed. If it crosses threshold button is pressed
    volatile int buttonPressedConfidenceLevelPB1 = 0;
 800024a:	2300      	movs	r3, #0
 800024c:	60bb      	str	r3, [r7, #8]

    // Increment this when button is released. If it crosses threshold button is released
    volatile int buttonReleasedConfidenceLevelPB1 = 0;
 800024e:	2300      	movs	r3, #0
 8000250:	607b      	str	r3, [r7, #4]

    // A threshold level to compare input bit against to avoid debouncing
    volatile int ConfidenceThreshold = 200;
 8000252:	23c8      	movs	r3, #200	; 0xc8
 8000254:	603b      	str	r3, [r7, #0]

  while (1)
  {

	  if((GPIOB->IDR & (1 << 1)))
 8000256:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <main+0xe4>)
 8000258:	691b      	ldr	r3, [r3, #16]
 800025a:	f003 0302 	and.w	r3, r3, #2
 800025e:	2b00      	cmp	r3, #0
 8000260:	d014      	beq.n	800028c <main+0xb8>
  	  {

		  // If buttonPressedConfidenceLevel > threshold, we know button was pressed and we will toggle LED
		  if(buttonPressedConfidenceLevelPB1 > ConfidenceThreshold)
 8000262:	68ba      	ldr	r2, [r7, #8]
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	429a      	cmp	r2, r3
 8000268:	dd0a      	ble.n	8000280 <main+0xac>
		  {
			  // Toggling LED on/off using XOR and output data register
			  GPIOC->ODR ^= (1 << 13);
 800026a:	4b12      	ldr	r3, [pc, #72]	; (80002b4 <main+0xe0>)
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	4a11      	ldr	r2, [pc, #68]	; (80002b4 <main+0xe0>)
 8000270:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000274:	6153      	str	r3, [r2, #20]
			  bp = 1;
 8000276:	2301      	movs	r3, #1
 8000278:	73fb      	strb	r3, [r7, #15]
			  buttonPressedConfidenceLevelPB1 = 0;
 800027a:	2300      	movs	r3, #0
 800027c:	60bb      	str	r3, [r7, #8]
 800027e:	e7ea      	b.n	8000256 <main+0x82>
		  }
		  else
		  {
			  // Increment buttonPressedConfidenceLevelPB1 every time there is a 1 in IDR
			  buttonPressedConfidenceLevelPB1++;
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	3301      	adds	r3, #1
 8000284:	60bb      	str	r3, [r7, #8]

			  // Reset buttonReleasedConfidenceLevelPB1 every time there is a 1 in IDR
			  buttonReleasedConfidenceLevelPB1 = 0;
 8000286:	2300      	movs	r3, #0
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	e7e4      	b.n	8000256 <main+0x82>
		  }

  	  }
	  else
  	  {
  		  if(bp == 1)
 800028c:	7bfb      	ldrb	r3, [r7, #15]
 800028e:	b2db      	uxtb	r3, r3
 8000290:	2b01      	cmp	r3, #1
 8000292:	d1e0      	bne.n	8000256 <main+0x82>
  		  {
  			  if(buttonReleasedConfidenceLevelPB1 > ConfidenceThreshold)
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	429a      	cmp	r2, r3
 800029a:	dd02      	ble.n	80002a2 <main+0xce>
  			  {
  				  bp = 0;
 800029c:	2300      	movs	r3, #0
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e7d9      	b.n	8000256 <main+0x82>
  			  }
  			  else
  			  {
  				  buttonReleasedConfidenceLevelPB1++;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	3301      	adds	r3, #1
 80002a6:	607b      	str	r3, [r7, #4]
  				  buttonPressedConfidenceLevelPB1 = 0;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60bb      	str	r3, [r7, #8]
	  if((GPIOB->IDR & (1 << 1)))
 80002ac:	e7d3      	b.n	8000256 <main+0x82>
 80002ae:	bf00      	nop
 80002b0:	40023800 	.word	0x40023800
 80002b4:	40020800 	.word	0x40020800
 80002b8:	40020400 	.word	0x40020400

080002bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002c0:	e7fe      	b.n	80002c0 <NMI_Handler+0x4>

080002c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002c2:	b480      	push	{r7}
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002c6:	e7fe      	b.n	80002c6 <HardFault_Handler+0x4>

080002c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002cc:	e7fe      	b.n	80002cc <MemManage_Handler+0x4>

080002ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002ce:	b480      	push	{r7}
 80002d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002d2:	e7fe      	b.n	80002d2 <BusFault_Handler+0x4>

080002d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002d8:	e7fe      	b.n	80002d8 <UsageFault_Handler+0x4>

080002da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002da:	b480      	push	{r7}
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002de:	bf00      	nop
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr

080002f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002f6:	b480      	push	{r7}
 80002f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002fa:	bf00      	nop
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000308:	f000 f83e 	bl	8000388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}

08000310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <SystemInit+0x20>)
 8000316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800031a:	4a05      	ldr	r2, [pc, #20]	; (8000330 <SystemInit+0x20>)
 800031c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	e000ed00 	.word	0xe000ed00

08000334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000334:	f8df d034 	ldr.w	sp, [pc, #52]	; 800036c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000338:	480d      	ldr	r0, [pc, #52]	; (8000370 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800033a:	490e      	ldr	r1, [pc, #56]	; (8000374 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800033c:	4a0e      	ldr	r2, [pc, #56]	; (8000378 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034e:	4a0b      	ldr	r2, [pc, #44]	; (800037c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000350:	4c0b      	ldr	r4, [pc, #44]	; (8000380 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800035e:	f7ff ffd7 	bl	8000310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000362:	f000 f825 	bl	80003b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000366:	f7ff ff35 	bl	80001d4 <main>
  bx  lr    
 800036a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800036c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000374:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000378:	08000418 	.word	0x08000418
  ldr r2, =_sbss
 800037c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000380:	20000024 	.word	0x20000024

08000384 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000384:	e7fe      	b.n	8000384 <ADC_IRQHandler>
	...

08000388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <HAL_IncTick+0x20>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	461a      	mov	r2, r3
 8000392:	4b06      	ldr	r3, [pc, #24]	; (80003ac <HAL_IncTick+0x24>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4413      	add	r3, r2
 8000398:	4a04      	ldr	r2, [pc, #16]	; (80003ac <HAL_IncTick+0x24>)
 800039a:	6013      	str	r3, [r2, #0]
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	20000000 	.word	0x20000000
 80003ac:	20000020 	.word	0x20000020

080003b0 <__libc_init_array>:
 80003b0:	b570      	push	{r4, r5, r6, lr}
 80003b2:	4d0d      	ldr	r5, [pc, #52]	; (80003e8 <__libc_init_array+0x38>)
 80003b4:	4c0d      	ldr	r4, [pc, #52]	; (80003ec <__libc_init_array+0x3c>)
 80003b6:	1b64      	subs	r4, r4, r5
 80003b8:	10a4      	asrs	r4, r4, #2
 80003ba:	2600      	movs	r6, #0
 80003bc:	42a6      	cmp	r6, r4
 80003be:	d109      	bne.n	80003d4 <__libc_init_array+0x24>
 80003c0:	4d0b      	ldr	r5, [pc, #44]	; (80003f0 <__libc_init_array+0x40>)
 80003c2:	4c0c      	ldr	r4, [pc, #48]	; (80003f4 <__libc_init_array+0x44>)
 80003c4:	f000 f818 	bl	80003f8 <_init>
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	10a4      	asrs	r4, r4, #2
 80003cc:	2600      	movs	r6, #0
 80003ce:	42a6      	cmp	r6, r4
 80003d0:	d105      	bne.n	80003de <__libc_init_array+0x2e>
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d8:	4798      	blx	r3
 80003da:	3601      	adds	r6, #1
 80003dc:	e7ee      	b.n	80003bc <__libc_init_array+0xc>
 80003de:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e2:	4798      	blx	r3
 80003e4:	3601      	adds	r6, #1
 80003e6:	e7f2      	b.n	80003ce <__libc_init_array+0x1e>
 80003e8:	08000410 	.word	0x08000410
 80003ec:	08000410 	.word	0x08000410
 80003f0:	08000410 	.word	0x08000410
 80003f4:	08000414 	.word	0x08000414

080003f8 <_init>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr

08000404 <_fini>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr
